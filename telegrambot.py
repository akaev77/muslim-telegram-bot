

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—é —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à Telegram-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É. –Ø —Ä–µ–∞–ª–∏–∑—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.

## –í—ã–±–æ—Ä —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π

–î–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

1. **Telegram Stars** - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π Telegram (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
2. **–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —à–ª—é–∑—ã** - —Ç–∞–∫–∏–µ –∫–∞–∫ QIWI, –ÆMoney (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏) –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –†–æ—Å—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã
3. **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º** - –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

–ò—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏.

## –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ

–í–æ—Ç —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–ª–∞—Ç–µ–∂–µ–π:

```python
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dataclasses import dataclass
from typing import Dict, List
import os
import json
import asyncio
import re
import hashlib
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
START, AWAITING_PAYMENT, PAYMENT_PROCESSING = range(3)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ
CHANNEL_INFO = """
–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üïå

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª!

–ó–¥–µ—Å—å —è –¥–µ–ª—é—Å—å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ–± –∏—Å–ª–∞–º–µ, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º—É—Å—É–ª—å–º–∞–Ω—Å–∫–∏–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏.

–í—ã –Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –†–∞–∑–±–æ—Ä—ã –∞—è—Ç–æ–≤ –ö–æ—Ä–∞–Ω–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∂–∏–∑–Ω–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –°—É–Ω–Ω–æ–π
‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ö–∞–ª—è–ª—å–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –î—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–∞–Ω–∞

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ üëá
"""

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
@dataclass
class Tariff:
    name: str
    price: int
    description: str
    duration_days: int

TARIFFS = {
    "month_1": Tariff(
        name="1 –º–µ—Å—è—Ü", 
        price=500, 
        description="–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 1 –º–µ—Å—è—Ü", 
        duration_days=30
    ),
    "month_3": Tariff(
        name="3 –º–µ—Å—è—Ü–∞", 
        price=1500, 
        description="–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞ + –±–æ–Ω—É—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", 
        duration_days=90
    ),
    "lifetime": Tariff(
        name="–ù–∞–≤—Å–µ–≥–¥–∞", 
        price=5000, 
        description="–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É + –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", 
        duration_days=0  # 0 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ
    ),
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏ –±–æ—Ç–∞
CHANNEL_ID = -1002556601836  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
BOT_TOKEN = "7678032381:AAG7gs3yTU8bfOrxx3ItNNbZEX-IruSaEGI"  # –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
ADMIN_ID = 7281866890  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
PAYMENT_CARD = "5555 5555 5555 5555"
PAYMENT_HOLDER = "–í–∞—à–µ –ò–º—è"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –ø–ª–∞—Ç–µ–∂–∞—Ö
USERS_DB_FILE = "users_db.json"

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
PAYMENT_CHECK_INTERVAL = 60

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users_db():
    if os.path.exists(USERS_DB_FILE):
        with open(USERS_DB_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"users": {}, "payments": {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users_db(db):
    with open(USERS_DB_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def generate_transaction_id(user_id):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    seed = f"{user_id}_{int(time.time())}"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞
    return f"TX{hashlib.md5(seed.encode()).hexdigest()[:8].upper()}"

# –§—É–Ω–∫—Ü–∏—è —ç–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤–∞—à–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
async def check_payment_status(tx_id):
    """
    –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º API
    
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã.
    –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–ª–∞—Ç–µ–∂ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º.
    """
    payment_file = f"payments/{tx_id}.txt"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    os.makedirs("payments", exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if os.path.exists(payment_file):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω
        os.remove(payment_file)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        return True
    
    return False

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_pending_payments(context):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    """
    db = load_users_db()
    payments_updated = False
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç–µ–∂–∞–º —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
    for tx_id, payment_info in list(db["payments"].items()):
        if payment_info["status"] == "pending":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            is_paid = await check_payment_status(tx_id)
            
            if is_paid:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ "confirmed"
                db["payments"][tx_id]["status"] = "confirmed"
                payments_updated = True
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Ç–∞—Ä–∏—Ñ–µ
                user_id = payment_info["user_id"]
                tariff_id = payment_info["tariff_id"]
                tariff = TARIFFS[tariff_id]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                if str(user_id) not in db["users"]:
                    db["users"][str(user_id)] = {}
                
                db["users"][str(user_id)]["has_access"] = True
                db["users"][str(user_id)]["tariff_id"] = tariff_id
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
                if tariff.duration_days > 0:
                    expiry_time = int(time.time()) + (tariff.duration_days * 24 * 60 * 60)
                    db["users"][str(user_id)]["access_expiry"] = expiry_time
                else:
                    # –î–ª—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null
                    db["users"][str(user_id)]["access_expiry"] = None
                
                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    invite_link = await context.bot.create_chat_invite_link(
                        chat_id=CHANNEL_ID,
                        member_limit=1,
                        expire_date=None
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    success_message = f"""
–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üéâ

–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

‚úÖ –¢–∞—Ä–∏—Ñ: {tariff.name}
‚úÖ –î–æ—Å—Ç—É–ø: {"–ù–∞–≤—Å–µ–≥–¥–∞" if tariff.duration_days == 0 else f"–ù–∞ {tariff.duration_days} –¥–Ω–µ–π"}

–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:
{invite_link.invite_link}

–î–∂–∞–∑–∞–∫—É–º—É –õ–ª–∞—Ö—É —Ö–∞–π—Ä–∞–Ω –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!
"""
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=success_message
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                        
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                    admin_message = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!
–û—Ç: ID {user_id}
–¢–∞—Ä–∏—Ñ: {tariff.name}
–°—É–º–º–∞: {tariff.price} ‚ÇΩ
–ö–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}
                    """
                    await context.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=admin_message
                    )
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if payments_updated:
        save_users_db(db)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
def get_tariffs_keyboard():
    keyboard = []
    for tariff_id, tariff in TARIFFS.items():
        button_text = f"{tariff.name} - {tariff.price} ‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"tariff_{tariff_id}")])
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
async def add_user_to_channel(user_id, context):
    try:
        invite_link = await context.bot.create_chat_invite_link(
            chat_id=CHANNEL_ID,
            member_limit=1,
            expire_date=None
        )
        return invite_link.invite_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = load_users_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –∏ –∏–º–µ–µ—Ç –ª–∏ –¥–æ—Å—Ç—É–ø
    user_id_str = str(user.id)
    if user_id_str in db["users"] and db["users"][user_id_str].get("has_access", False):
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ
    await update.message.reply_text(
        CHANNEL_INFO,
        reply_markup=get_tariffs_keyboard()
    )
    
    return START

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
async def tariff_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    tariff_id = query.data.split("_")[1]
    tariff = TARIFFS[tariff_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["selected_tariff"] = tariff_id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    tx_id = generate_transaction_id(query.from_user.id)
    context.user_data["transaction_id"] = tx_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = load_users_db()
    if "payments" not in db:
        db["payments"] = {}
    
    db["payments"][tx_id] = {
        "user_id": query.from_user.id,
        "tariff_id": tariff_id,
        "amount": tariff.price,
        "status": "pending",
        "timestamp": int(asyncio.get_event_loop().time())
    }
    save_users_db(db)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
    payment_message = f"""
*–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ: {tariff.name}*
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {tariff.price} ‚ÇΩ
üìã –û–ø–∏—Å–∞–Ω–∏–µ: {tariff.description}

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:
*{PAYMENT_CARD}*
–î–µ—Ä–∂–∞—Ç–µ–ª—å: {PAYMENT_HOLDER}

‚ö†Ô∏è *–í–ê–ñ–ù–û!* –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: `{tx_id}`

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª" –Ω–∏–∂–µ, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.
"""
    
    keyboard = [
        [InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{tx_id}")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=payment_message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return AWAITING_PAYMENT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
async def payment_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action, tx_id = query.data.split("_", 1)
    
    if action == "cancel":
        await query.edit_message_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    db = load_users_db()
    if tx_id not in db["payments"]:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return ConversationHandler.END
    
    payment_info = db["payments"][tx_id]
    tariff = TARIFFS[payment_info["tariff_id"]]
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
    await query.edit_message_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {tariff.price} ‚ÇΩ.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ –¥–æ 5 –º–∏–Ω—É—Ç).\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
    )
    
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
    is_paid = await check_payment_status(tx_id)
    
    if is_paid:
        # –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        db["payments"][tx_id]["status"] = "confirmed"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = query.from_user.id
        if str(user_id) not in db["users"]:
            db["users"][str(user_id)] = {}
        
        db["users"][str(user_id)]["has_access"] = True
        db["users"][str(user_id)]["tariff_id"] = payment_info["tariff_id"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        if tariff.duration_days > 0:
            expiry_time = int(time.time()) + (tariff.duration_days * 24 * 60 * 60)
            db["users"][str(user_id)]["access_expiry"] = expiry_time
        else:
            db["users"][str(user_id)]["access_expiry"] = None
        
        save_users_db(db)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        invite_link = await add_user_to_channel(user_id, context)
        
        if invite_link:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            success_message = f"""
–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üéâ

–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

‚úÖ –¢–∞—Ä–∏—Ñ: {tariff.name}
‚úÖ –î–æ—Å—Ç—É–ø: {"–ù–∞–≤—Å–µ–≥–¥–∞" if tariff.duration_days == 0 else f"–ù–∞ {tariff.duration_days} –¥–Ω–µ–π"}

–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:
{invite_link}

–î–∂–∞–∑–∞–∫—É–º—É –õ–ª–∞—Ö—É —Ö–∞–π—Ä–∞–Ω –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!
"""
            await context.bot.send_message(
                chat_id=user_id,
                text=success_message
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = f"""
‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!
–û—Ç: ID {user_id} (@{query.from_user.username or '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})
–¢–∞—Ä–∏—Ñ: {tariff.name}
–°—É–º–º–∞: {tariff.price} ‚ÇΩ
–ö–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}
"""
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message
            )
            
            return ConversationHandler.END
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "pending"
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        admin_message = f"""
‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞!
–û—Ç: ID {query.from_user.id} (@{query.from_user.username or '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'})
–¢–∞—Ä–∏—Ñ: {tariff.name}
–°—É–º–º–∞: {tariff.price} ‚ÇΩ
–ö–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_id}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.
"""
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{tx_id}"),
                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tx_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_message,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    return PAYMENT_PROCESSING

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_payment_processing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if query.from_user.id != ADMIN_ID:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        return
    
    action, tx_id = query.data.split("_", 1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
    db = load_users_db()
    if tx_id not in db["payments"]:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    payment_info = db["payments"][tx_id]
    user_id = payment_info["user_id"]
    tariff_id = payment_info["tariff_id"]
    tariff = TARIFFS[tariff_id]
    
    if action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        db["payments"][tx_id]["status"] = "confirmed"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if str(user_id) not in db["users"]:
            db["users"][str(user_id)] = {}
        
        db["users"][str(user_id)]["has_access"] = True
        db["users"][str(user_id)]["tariff_id"] = tariff_id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
        if tariff.duration_days > 0:
            import time
            expiry_time = int(time.time()) + (tariff.duration_days * 24 * 60 * 60)
            db["users"][str(user_id)]["access_expiry"] = expiry_time
        else:
            # –î–ª—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –¥–∞–ª–µ–∫—É—é –¥–∞—Ç—É –∏–ª–∏ null
            db["users"][str(user_id)]["access_expiry"] = None
        
        save_users_db(db)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invite_link = await add_user_to_channel(user_id, context)
        
        if invite_link:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            success_message = f"""
–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! üéâ

–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

‚úÖ –¢–∞—Ä–∏—Ñ: {tariff.name}
‚úÖ –î–æ—Å—Ç—É–ø: {"–ù–∞–≤—Å–µ–≥–¥–∞" if tariff.duration_days == 0 else f"–ù–∞ {tariff.duration_days} –¥–Ω–µ–π"}

–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:
{invite_link}

–î–∂–∞–∑–∞–∫—É–º—É –õ–ª–∞—Ö—É —Ö–∞–π—Ä–∞–Ω –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!
"""
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=success_message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            await query.edit_message_text(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.")
        else:
            await query.edit_message_text(
                "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é."
            )
    
    elif action == "reject":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        db["payments"][tx_id]["status"] = "rejected"
        save_users_db(db)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        reject_message = """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
- –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
"""
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=reject_message
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        await query.edit_message_text("–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin_filter(update: Update):
    return update.effective_user.id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /stats
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_filter(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    db = load_users_db()
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_users = len(db.get("users", {}))
    active_users = sum(1 for user_data in db.get("users", {}).values() if user_data.get("has_access", False))
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
    tariffs_stats = {}
    for tariff_id in TARIFFS:
        tariffs_stats[tariff_id] = sum(
            1 for user_data in db.get("users", {}).values() 
            if user_data.get("tariff_id") == tariff_id and user_data.get("has_access", False)
        )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    total_payments = len(db.get("payments", {}))
    confirmed_payments = sum(1 for payment in db.get("payments", {}).values() if payment.get("status") == "confirmed")
    pending_payments = sum(1 for payment in db.get("payments", {}).values() if payment.get("status") == "pending")
    rejected_payments = sum(1 for payment in db.get("payments", {}).values() if payment.get("status") == "rejected")
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    total_revenue = sum(
        payment.get("amount", 0) 
        for payment in db.get("payments", {}).values() 
        if payment.get("status") == "confirmed"
    )
    
    stats_message = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {active_users}

üí∞ *–¢–∞—Ä–∏—Ñ—ã:*
{chr(10).join(f"- {TARIFFS[tariff_id].name}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤" for tariff_id, count in tariffs_stats.items())}

üí≥ *–ü–ª–∞—Ç–µ–∂–∏:*
- –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed_payments}
- –í –æ–∂–∏–¥–∞–Ω–∏–∏: {pending_payments}
- –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_payments}

üìà *–î–æ—Ö–æ–¥:*
- –û–±—â–∞—è —Å—É–º–º–∞: {total_revenue} ‚ÇΩ
"""
    
    await update.message.reply_text(stats_message, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ /find_user
async def find_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin_filter(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /find_user 123456789")
        return
    
    user_id = context.args[0]
    db = load_users_db()
    
    if user_id not in db.get("users", {}):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    user_data = db["users"][user_id]
    tariff_id = user_data.get("tariff_id")
    tariff_name = TARIFFS[tariff_id].name if tariff_id in TARIFFS else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
    
    has_access = user_data.get("has_access", False)
    access_status = "–ê–∫—Ç–∏–≤–µ–Ω" if has_access else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    expiry = user_data.get("access_expiry")
    if expiry:
        import datetime
        expiry_date = datetime.datetime.fromtimestamp(expiry).strftime("%d.%m.%Y %H:%M")
    else:
        expiry_date = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ" if has_access else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
    
    user_info = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*

üÜî ID: {user_id}
üìÖ –¢–∞—Ä–∏—Ñ: {tariff_name}
üîë –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞: {access_status}
‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date}
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    keyboard = []
    if has_access:
        keyboard.append([InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"revoke_{user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø",
